// Code generated by protoc-gen-crpc. DO NOT EDIT.
// source: example/interface/calculator.proto
package calculator

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"google.golang.org/grpc"
)

type calculateRequestEntry struct {
	Timestamp time.Time         `bson:"timestamp"`
	Request   *CalculateRequest `bson:"request"`
}

type getRandomRequestEntry struct {
	Timestamp time.Time         `bson:"timestamp"`
	Request   *GetRandomRequest `bson:"request"`
}

type CalculatorcRPCClient interface {
	Calculate(ctx context.Context, in *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error)
	GetRandom(ctx context.Context, in *GetRandomRequest, opts ...grpc.CallOption) (*GetRandomResponse, error)
}
type calculatorcRPCClient struct {
	client CalculatorClient
	db     *mongo.Client
}

func NewCalculatorcRPCClient(cc grpc.ClientConnInterface, db *mongo.Client) CalculatorcRPCClient {
	client := NewCalculatorClient(cc)
	return &calculatorcRPCClient{
		client: client,
		db:     db,
	}
}

func (s *calculatorcRPCClient) Calculate(ctx context.Context, req *CalculateRequest, opts ...grpc.CallOption) (*CalculateResponse, error) {
	// Log the request to MongoDB async
	go s.db.Database("Calculator").Collection("Calculate").InsertOne(ctx, &calculateRequestEntry{
		Timestamp: time.Now(),
		Request:   req,
	})

	// Invoke the original RPC method
	resp, err := s.client.Calculate(ctx, req)

	// Handle response and error
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (s *calculatorcRPCClient) GetRandom(ctx context.Context, req *GetRandomRequest, opts ...grpc.CallOption) (*GetRandomResponse, error) {
	// Log the request to MongoDB async
	go s.db.Database("Calculator").Collection("GetRandom").InsertOne(ctx, &getRandomRequestEntry{
		Timestamp: time.Now(),
		Request:   req,
	})

	// Invoke the original RPC method
	resp, err := s.client.GetRandom(ctx, req)

	// Handle response and error
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func readFlags(c *CRPCConfig) {
	for {
		response, err := http.Get(fmt.Sprintf("http://%s/api/flags?service_name=%s&is_staging=%t", c.ControlPlaneURL, c.ServiceName, c.IsStaging))
		if err != nil {
			fmt.Println(err)
			time.Sleep(10 * time.Second)
			continue
		}
		decoder := json.NewDecoder(response.Body)
		err = decoder.Decode(&c.FlagData)
		if err != nil {
			time.Sleep(10 * time.Second)
			continue
		}
		fmt.Println(c.FlagData)
		time.Sleep(10 * time.Second)
	}
}

func RegisterCalculatorCRPCServer(s grpc.ServiceRegistrar, srv CalculatorServer, c *CRPCConfig) {
	go readFlags(c)
	s.RegisterService(&Calculator_ServiceDesc, srv)
}
