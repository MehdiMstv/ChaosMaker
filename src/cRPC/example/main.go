// Code generated by protoc-gen-chaos-maker.
// source: example/interface/calculator.proto
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/MehdiMstv/ChaosMaker/src/cRPC/example/interface/calculator"
	"io"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/status"
)

type config struct {
	LoggerMongodbURI string
	ControlPlaneURL  string
	StagingAddress   string `json:"staging_address"`
	ServiceName      string
	Port             string
}

type calculate1RequestEntry struct {
	Timestamp primitive.DateTime             `bson:"timestamp"`
	Request   *calculator.Calculator1Request `bson:"request"`
}

type calculate2RequestEntry struct {
	Timestamp primitive.DateTime             `bson:"timestamp"`
	Request   *calculator.Calculator2Request `bson:"request"`
}

func RunServer(db *mongo.Client, conn *grpc.ClientConn, c *config) {
	router := gin.Default()
	router.POST("/start_Calculate1_chaos", handleCalculate1Chaos(db, conn, c))
	router.POST("/start_Calculate2_chaos", handleCalculate2Chaos(db, conn, c))
	err := router.Run(":" + c.Port)
	if err != nil {
		return
	}
}

func getRequests(db *mongo.Client, methodName string) (*mongo.Cursor, error) {
	requests, err := db.Database("Calculator").Collection(methodName).Find(context.Background(), bson.D{})
	if err != nil {
		return nil, err
	}
	return requests, nil
}

func handleCalculate1Chaos(db *mongo.Client, conn *grpc.ClientConn, config *config) gin.HandlerFunc {
	fn := func(c *gin.Context) {
		chaosID := c.Request.FormValue("id")
		var data []calculate1RequestEntry

		http.Post(fmt.Sprintf("http://%s/api/chaos?id=%s", config.ControlPlaneURL, chaosID), "application/json", nil)

		filters, _ := getRequests(db, "Calculate1")
		err := filters.All(context.Background(), &data)
		if err != nil {
			c.JSON(500, gin.H{"error": err.Error()})
			return
		}

		client := calculator.NewCalculatorClient(conn)
		http.Post(fmt.Sprintf("http://%s/api/chaos?id=%s", config.ControlPlaneURL, chaosID), "application/json", nil)

		resultData := make(map[string]int)
		for _, v := range data {
			_, err := client.Calculate1(context.Background(), v.Request)
			if err != nil {
				if s, ok := status.FromError(err); ok {
					resultData[s.Code().String()] = resultData[s.Code().String()] + 1
				} else {
					resultData["Unknown"] = resultData["Unknown"] + 1
				}
				continue
			}
			resultData["Success"] = resultData["Success"] + 1
		}

		jsonString, _ := json.Marshal(resultData)
		http.Post(fmt.Sprintf("http://%s/api/chaos?id=%s", config.ControlPlaneURL, chaosID), "application/json", bytes.NewBuffer(jsonString))
		c.String(http.StatusOK, "Chaos Done")
	}

	return fn
}

func handleCalculate2Chaos(db *mongo.Client, conn *grpc.ClientConn, config *config) gin.HandlerFunc {
	fn := func(c *gin.Context) {
		chaosID := c.Request.FormValue("id")
		var data []calculate2RequestEntry

		http.Post(fmt.Sprintf("http://%s/api/chaos?id=%s", config.ControlPlaneURL, chaosID), "application/json", nil)

		filters, _ := getRequests(db, "Calculate2")
		err := filters.All(context.Background(), &data)
		if err != nil {
			c.JSON(500, gin.H{"error": err.Error()})
			return
		}

		client := calculator.NewCalculatorClient(conn)
		http.Post(fmt.Sprintf("http://%s/api/chaos?id=%s", config.ControlPlaneURL, chaosID), "application/json", nil)

		resultData := make(map[string]int)
		for _, v := range data {
			_, err := client.Calculate2(context.Background(), v.Request)
			if err != nil {
				if s, ok := status.FromError(err); ok {
					resultData[s.Code().String()] = resultData[s.Code().String()] + 1
				} else {
					resultData["Unknown"] = resultData["Unknown"] + 1
				}
				continue
			}
			resultData["Success"] = resultData["Success"] + 1
		}

		jsonString, _ := json.Marshal(resultData)
		http.Post(fmt.Sprintf("http://%s/api/chaos?id=%s", config.ControlPlaneURL, chaosID), "application/json", bytes.NewBuffer(jsonString))
		c.String(http.StatusOK, "Chaos Done")
	}

	return fn
}

func getStagingAddress(c *config) error {
	response, err := http.Get(fmt.Sprintf("http://%s/api/service/staging_address?name=%s", c.ControlPlaneURL, c.ServiceName))
	if err != nil {
		return err
	}
	if response.StatusCode != 200 {
		return fmt.Errorf("failed to get staging address")
	}

	body, err := io.ReadAll(response.Body)
	if err != nil {
		return err
	}

	err = json.Unmarshal(body, &c)
	if err != nil {
		return err
	}

	return nil
}

// main function of program, you can change config values here
func main() {
	c := &config{
		LoggerMongodbURI: "mongodb://127.0.0.1:27017/",
		ControlPlaneURL:  "127.0.0.1:9033",
		ServiceName:      "chaos",
		Port:             "8082",
	}

	err := getStagingAddress(c)
	if err != nil {
		log.Fatal(err)
		return
	}

	mongoClient, err := mongo.Connect(context.Background(), options.Client().ApplyURI(c.LoggerMongodbURI))
	if err != nil {
		log.Fatal(err)
		return
	}

	conn, err := grpc.Dial(c.StagingAddress, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatal(err)
		return
	}

	RunServer(mongoClient, conn, c)
}
